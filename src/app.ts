import express from 'express';
import mongoose from 'mongoose';
import cookieParser from 'cookie-parser';
import path from 'path';
import 'dotenv/config';

import { NotFoundError } from './errors';

import router from './routes';
import error from './middlewares/error';

const { PORT = 3000, MONGO_URL = 'mongodb://127.0.0.1:27017/mestodb' } = process.env;

const app = express();

// ะฟะฐััะตั ะดะปั ัะฐะฑะพัั ั ะบัะบะฐะผะธ
app.use(cookieParser());
// ะฟะฐััะธะผ ะฒัะพะดััะธะน json
app.use(express.json());
// ะฟะฐััะธะผ ะดะฐะฝะฝัะต ะธะท ััะปะฐ
app.use(express.urlencoded({ extended: true }));
// ะพัะดะฐะตะผ ััะฐัะธะบั ะธะท ะฟะฐะฟะบะธ public
app.use(express.static(path.join(__dirname, 'public')));
// ัะพัะบะฐ ะฒัะพะดะฐ ะฒ ัะพััะธะฝะณ
app.use('/', router);
// ะพะฑัะฐะฑะพัะบะฐ ัะพััะพะฒ, ะบะพัะพััะต ะฝะธะณะดะต ะฝะต ะพะฑัะฐะฑะพัะฐะฝั ะฒััะต
router.use((req, res, next) => {
  next(new NotFoundError('ะกััะฐะฝะธัะฐ ะฝะต ะฝะฐะนะดะตะฝะฐ'));
});

// ััั ะฟะตัะตัะฒะฐััะฒะฐะตะผ ะพัะธะฑะบะธ, ะบะพัะพััะต ะฝะธะณะดะต ะฝะต ะพะฑัะฐะฑะพัะฐะปะธัั
app.use(error);

const connect = async () => {
  try {
    await mongoose.connect(MONGO_URL);
    console.info('๐ ะะพะดะบะปััะตะฝะธะต ะบ ะะ ะฟัะพัะปะพ ััะฟะตัะฝะพ ๐');
    await app.listen(PORT, () => {
      console.info('๐ ะกะตัะฒะตั ััะฟะตัะฝะพ ะทะฐะฟััะตะฝ ะฝะฐ ะฟะพััั: ', PORT, ' ๐');
    });
  } catch (e) {
    console.error('๐ฉ ะัะธ ะธะฝะธัะธะฐะปะธะทะฐัะธะธ ะฟัะธะปะพะถะตะฝะธั ััะพ-ัะพ ะฟะพัะปะพ ะฝะต ัะฐะบ... ๐ฉ', e);
  }
};

connect();
